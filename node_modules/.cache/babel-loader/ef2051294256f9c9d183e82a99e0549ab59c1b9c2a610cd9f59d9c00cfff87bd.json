{"ast":null,"code":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// don't want to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\n\nconst languages = ['Rus', 'Ukr', 'Eng', 'Ger'];\ni18n\n// load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n// learn more: https://github.com/i18next/i18next-http-backend\n// want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n.use(Backend)\n// detect user language\n// learn more: https://github.com/i18next/i18next-browser-languageDetector\n.use(LanguageDetector)\n// pass the i18n instance to react-i18next.\n.use(initReactI18next)\n// init i18next\n// for all options read: https://www.i18next.com/overview/configuration-options\n.init({\n  fallbackLng: 'false',\n  debug: true,\n  debug: true,\n  lng: 'en',\n  nsSeparator: false,\n  keySeparator: false,\n  whitelist: languages,\n  interpolation: {\n    escapeValue: false // not needed for react as it escapes by default\n  },\n\n  backend: {\n    loadPath: '/locales/{{lng}}/{{ns}}.json'\n  }\n});\nexport default i18n;","map":{"version":3,"names":["i18n","initReactI18next","Backend","LanguageDetector","languages","use","init","fallbackLng","debug","lng","nsSeparator","keySeparator","whitelist","interpolation","escapeValue","backend","loadPath"],"sources":["D:/REACT/mapStars/frontend/src/i18next.js"],"sourcesContent":["import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n// don't want to use this?\r\n// have a look at the Quick start guide \r\n// for passing in lng and translations on init\r\n\r\nconst languages = ['Rus', 'Ukr', 'Eng', 'Ger'];\r\n\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  // want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: 'false',\r\n    debug: true,\r\n    debug: true,\r\n    lng: 'en',\r\n      nsSeparator: false,\r\n      keySeparator: false,\r\n    whitelist: languages,\r\n\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n    backend: {\r\n      loadPath: '/locales/{{lng}}/{{ns}}.json'\r\n    }\r\n  });\r\n\r\n\r\nexport default i18n;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,SAASC,gBAAgB,QAAQ,eAAe;AAChD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,gBAAgB,MAAM,kCAAkC;AAC/D;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;AAE9CJ;AACE;AACA;AACA;AAAA,CACCK,GAAG,CAACH,OAAO;AACZ;AACA;AAAA,CACCG,GAAG,CAACF,gBAAgB;AACrB;AAAA,CACCE,GAAG,CAACJ,gBAAgB;AACrB;AACA;AAAA,CACCK,IAAI,CAAC;EACJC,WAAW,EAAE,OAAO;EACpBC,KAAK,EAAE,IAAI;EACXA,KAAK,EAAE,IAAI;EACXC,GAAG,EAAE,IAAI;EACPC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,KAAK;EACrBC,SAAS,EAAER,SAAS;EAEpBS,aAAa,EAAE;IACbC,WAAW,EAAE,KAAK,CAAE;EACtB,CAAC;;EACDC,OAAO,EAAE;IACPC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAGJ,eAAehB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}